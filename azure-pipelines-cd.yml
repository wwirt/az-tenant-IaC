# Azure DevOps CD Pipeline for Azure Tenant Vending Platform
trigger: none

resources:
  pipelines:
    - pipeline: ciPipeline
      source: azure-pipelines-ci
      trigger:
        branches:
          include:
            - main
            - develop

variables:
  terraformVersion: '1.5.0'
  backendServiceConnection: 'terraform-backend-connection'
  tenantServiceConnection: 'tenant-management-connection'
  backendResourceGroup: 'terraform-state-rg'
  backendStorageAccount: 'terraformstatestore001'
  workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
  configDirectory: '$(System.DefaultWorkingDirectory)/config'

stages:
- stage: Deploy_Dev
  displayName: 'Deploy to Development'
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/develop'))
  jobs:
  - deployment: DeployDev
    displayName: 'Deploy Development Environment'
    pool:
      vmImage: 'ubuntu-latest'
    environment: 'development'
    strategy:
      runOnce:
        deploy:
          steps:
          - checkout: self
          - task: TerraformInstaller@0
            displayName: 'Install Terraform'
            inputs:
              terraformVersion: $(terraformVersion)
          - task: TerraformTaskV4@4
            displayName: 'Terraform Init'
            inputs:
              provider: 'azurerm'
              command: 'init'
              workingDirectory: $(workingDirectory)
              backendServiceArm: $(backendServiceConnection)
              backendAzureRmResourceGroupName: '$(backendResourceGroup)'
              backendAzureRmStorageAccountName: '$(backendStorageAccount)'
              backendAzureRmContainerName: 'tfstate'
              backendAzureRmKey: 'tenant-dev.tfstate'
          - task: TerraformTaskV4@4
            displayName: 'Terraform Apply'
            inputs:
              provider: 'azurerm'
              command: 'apply'
              workingDirectory: $(workingDirectory)
              environmentServiceNameAzureRM: $(tenantServiceConnection)
              commandOptions: '-var-file="../config/dev-config.json" -auto-approve'

- stage: Deploy_Prod
  displayName: 'Deploy to Production'
  jobs:
  - deployment: DeployProd
    displayName: 'Deploy Production Environment'
    pool:
      vmImage: 'ubuntu-latest'
    environment: 'production'
    strategy:
      runOnce:
        deploy:
          steps:
          - checkout: self
          - task: TerraformInstaller@0
            displayName: 'Install Terraform'
            inputs:
              terraformVersion: $(terraformVersion)
          - task: TerraformTaskV4@4
            displayName: 'Terraform Init'
            inputs:
              provider: 'azurerm'
              command: 'init'
              workingDirectory: $(workingDirectory)
              backendServiceArm: $(backendServiceConnection)
              backendAzureRmResourceGroupName: '$(backendResourceGroup)'
              backendAzureRmStorageAccountName: '$(backendStorageAccount)'
              backendAzureRmContainerName: 'tfstate'
              backendAzureRmKey: 'tenant-prod.tfstate'
          - task: TerraformTaskV4@4
            displayName: 'Terraform Apply'
            inputs:
              provider: 'azurerm'
              command: 'apply'
              workingDirectory: $(workingDirectory)
              environmentServiceNameAzureRM: $(tenantServiceConnection)
              commandOptions: '-var-file="../config/prod-config.json" -auto-approve'
